name: Release and Deploy to PyPI

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1, 1.0, or 1.0.6)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
    - name: Validate version format
      run: |
        if [[ ! "${{ github.event.inputs.version }}" =~ ^[0-9]+(\.[0-9]+)?(\.[0-9]+)?$ ]]; then
          echo "❌ Invalid version format. Expected: X, X.Y, or X.Y.Z (e.g., 1, 1.0, or 1.0.6)"
          exit 1
        fi
        echo "✅ Version format is valid: ${{ github.event.inputs.version }}"
        
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Update version in pyproject.toml and __init__.py
      run: |
        poetry version ${{ github.event.inputs.version }}
        sed -i 's/__version__ = "[^"]*"/__version__ = "${{ github.event.inputs.version }}"/' webquiz/__init__.py
        
    - name: Install dependencies
      run: poetry install --no-interaction
      
    - name: Commit version change
      run: |
        git add pyproject.toml webquiz/__init__.py
        git commit -m "Bump version to ${{ github.event.inputs.version }}"
        
    - name: Create and push tag
      run: |
        git tag "v${{ github.event.inputs.version }}"
        git push origin "v${{ github.event.inputs.version }}"
        
    - name: Push version commit
      run: |
        git push origin HEAD:${{ github.ref_name }}
        
    - name: Build package
      run: |
        poetry build

    - name: Install Pandoc and LaTeX
      run: |
        sudo apt-get update
        sudo apt-get install -y pandoc texlive-xetex texlive-fonts-recommended texlive-lang-cyrillic

    - name: Generate Ukrainian PDF Documentation
      run: |
        cd docs/uk
        cat $(ls *.md | sort) > ../combined_uk.md
        cd ..
        pandoc combined_uk.md \
          -o webquiz-documentation-uk.pdf \
          --pdf-engine=xelatex \
          --toc \
          --toc-depth=2 \
          --number-sections \
          -V geometry:margin=1in \
          -V mainfont="DejaVu Sans" \
          -V documentclass=report \
          --resource-path=.:imgs \
          --metadata title="WebQuiz Documentation (Ukrainian)" \
          --metadata author="WebQuiz Team" \
          --metadata date="$(date +%Y-%m-%d)"
        mv webquiz-documentation-uk.pdf ../dist/

    - name: Generate English PDF Documentation
      run: |
        cd docs/en
        cat $(ls *.md | sort) > ../combined_en.md
        cd ..
        pandoc combined_en.md \
          -o webquiz-documentation-en.pdf \
          --pdf-engine=xelatex \
          --toc \
          --toc-depth=2 \
          --number-sections \
          -V geometry:margin=1in \
          -V mainfont="DejaVu Sans" \
          -V documentclass=report \
          --resource-path=.:imgs \
          --metadata title="WebQuiz Documentation (English)" \
          --metadata author="WebQuiz Team" \
          --metadata date="$(date +%Y-%m-%d)"
        mv webquiz-documentation-en.pdf ../dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist/

    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create release notes
        cat > release_notes.md << 'EOF'
        🚀 **WebQuiz v${{ github.event.inputs.version }}**

        This release includes:
        - 📦 Python wheel package (`webquiz-${{ github.event.inputs.version }}-py3-none-any.whl`)
        - 📋 Source distribution (`webquiz-${{ github.event.inputs.version }}.tar.gz`)
        - 📖 Documentation in Ukrainian (`webquiz-documentation-uk.pdf`)
        - 📖 Documentation in English (`webquiz-documentation-en.pdf`)

        ## Installation
        ```bash
        pip install webquiz==${{ github.event.inputs.version }}
        ```

        ## What's Changed
        See the [commit history](https://github.com/oduvan/webquiz/commits/v${{ github.event.inputs.version }}) for detailed changes.

        ---
        *This release was automatically created by the release workflow.*
        EOF

        # Create release with built artifacts (includes wheel, tar.gz, and PDFs)
        gh release create "v${{ github.event.inputs.version }}" \
          --title "Release v${{ github.event.inputs.version }}" \
          --notes-file release_notes.md \
          --target ${{ github.ref_name }} \
          dist/*

    - name: Update webquiz-ansible repository
      env:
        ANSIBLE_REPO_TOKEN: ${{ secrets.ANSIBLE_REPO_TOKEN }}
      run: |
        echo "Updating webquiz-ansible repository with new version ${{ github.event.inputs.version }}"
        
        # Clone the webquiz-ansible repository
        git clone https://$ANSIBLE_REPO_TOKEN@github.com/oduvan/webquiz-ansible.git
        cd webquiz-ansible
        
        # Configure git for the action
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Update the version in playbooks/raspberry-pi.yml
        sed -i 's/webquiz==[0-9]\+\(\.[0-9]\+\)\{0,2\}/webquiz==${{ github.event.inputs.version }}/g' playbooks/raspberry-pi.yml
        
        # Check if there are any changes to commit
        if git diff --quiet; then
          echo "No changes to commit - version may already be up to date"
        else
          # Commit and push the changes
          git add playbooks/raspberry-pi.yml
          git commit -m "Update webquiz version to ${{ github.event.inputs.version }}

          Automatically updated by webquiz release workflow.
          Release: https://github.com/oduvan/webquiz/releases/tag/v${{ github.event.inputs.version }}"
          
          git push origin master
          echo "Successfully updated webquiz-ansible repository"
        fi