name: Release and Deploy to PyPI

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1, 1.0, or 1.0.6)'
        required: true
        type: string

jobs:
  build-binaries:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            binary_name: webquiz-linux
            artifact_name: webquiz-linux
          - os: macos-13
            binary_name: webquiz-macos-intel
            artifact_name: webquiz-macos-intel
          - os: macos-14
            binary_name: webquiz-macos-apple-silicon
            artifact_name: webquiz-macos-apple-silicon
          - os: windows-latest
            binary_name: webquiz-windows.exe
            artifact_name: webquiz-windows.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        python -m pip install poetry

    - name: Install dependencies
      run: python -m poetry install --no-interaction

    - name: Build binary
      run: python -m poetry run build_binary

    - name: Rename binary (Linux/macOS)
      if: runner.os != 'Windows'
      run: mv dist/webquiz dist/${{ matrix.binary_name }}

    - name: Rename binary (Windows)
      if: runner.os == 'Windows'
      run: move dist\webquiz.exe dist\${{ matrix.binary_name }}

    - name: Create zip archive (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        cd dist
        zip ${{ matrix.binary_name }}.zip ${{ matrix.binary_name }}

    - name: Create zip archive (Windows)
      if: runner.os == 'Windows'
      run: |
        cd dist
        Compress-Archive -Path ${{ matrix.binary_name }} -DestinationPath ${{ matrix.binary_name }}.zip

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/${{ matrix.binary_name }}.zip
        retention-days: 1

  release:
    needs: build-binaries
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
    - name: Validate version format
      run: |
        if [[ ! "${{ github.event.inputs.version }}" =~ ^[0-9]+(\.[0-9]+)?(\.[0-9]+)?$ ]]; then
          echo "❌ Invalid version format. Expected: X, X.Y, or X.Y.Z (e.g., 1, 1.0, or 1.0.6)"
          exit 1
        fi
        echo "✅ Version format is valid: ${{ github.event.inputs.version }}"

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Update version in pyproject.toml and __init__.py
      run: |
        poetry version ${{ github.event.inputs.version }}
        sed -i 's/__version__ = "[^"]*"/__version__ = "${{ github.event.inputs.version }}"/' webquiz/__init__.py

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Commit version change
      run: |
        git add pyproject.toml webquiz/__init__.py
        git commit -m "Bump version to ${{ github.event.inputs.version }}"

    - name: Create and push tag
      run: |
        git tag "v${{ github.event.inputs.version }}"
        git push origin "v${{ github.event.inputs.version }}"

    - name: Push version commit
      run: |
        git push origin HEAD:${{ github.ref_name }}

    - name: Build package
      run: |
        poetry build

    - name: Install Pandoc and LaTeX
      run: |
        sudo apt-get update
        sudo apt-get install -y pandoc texlive-xetex texlive-fonts-recommended texlive-lang-cyrillic

    - name: Generate Ukrainian PDF Documentation
      run: |
        cd docs/uk
        cat $(ls *.md | sort) > ../combined_uk.md
        cd ..
        pandoc combined_uk.md \
          -o webquiz-documentation-uk.pdf \
          --pdf-engine=xelatex \
          --toc \
          --toc-depth=2 \
          --number-sections \
          -V geometry:margin=1in \
          -V mainfont="DejaVu Sans" \
          -V documentclass=report \
          --resource-path=.:imgs \
          --metadata title="WebQuiz Documentation (Ukrainian)" \
          --metadata subtitle="Version ${{ github.event.inputs.version }}" \
          --metadata author="WebQuiz Team" \
          --metadata date="$(date +%Y-%m-%d)"

    - name: Generate English PDF Documentation
      run: |
        cd docs/en
        cat $(ls *.md | sort) > ../combined_en.md
        cd ..
        pandoc combined_en.md \
          -o webquiz-documentation-en.pdf \
          --pdf-engine=xelatex \
          --toc \
          --toc-depth=2 \
          --number-sections \
          -V geometry:margin=1in \
          -V mainfont="DejaVu Sans" \
          -V documentclass=report \
          --resource-path=.:imgs \
          --metadata title="WebQuiz Documentation (English)" \
          --metadata subtitle="Version ${{ github.event.inputs.version }}" \
          --metadata author="WebQuiz Team" \
          --metadata date="$(date +%Y-%m-%d)"

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist/

    - name: Download binary artifacts
      uses: actions/download-artifact@v4
      with:
        path: binaries/

    - name: List downloaded binaries
      run: |
        echo "📦 Downloaded binaries:"
        ls -lah binaries/
        find binaries/ -type f

    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create release notes
        cat > release_notes.md << 'EOF'
        🚀 **WebQuiz v${{ github.event.inputs.version }}**

        This release includes:

        ### 📦 Python Packages
        - Python wheel package (`webquiz-${{ github.event.inputs.version }}-py3-none-any.whl`)
        - Source distribution (`webquiz-${{ github.event.inputs.version }}.tar.gz`)

        ### 🖥️ Pre-built Binaries (Zipped)
        - **Linux**: `webquiz-linux.zip` (x86_64, no Python required)
        - **macOS Intel**: `webquiz-macos-intel.zip` (x86_64, no Python required)
        - **macOS Apple Silicon**: `webquiz-macos-apple-silicon.zip` (ARM64/M1/M2/M3, no Python required)
        - **Windows**: `webquiz-windows.exe.zip` (x86_64, no Python required)

        ### 📖 Documentation
        - Ukrainian: `webquiz-documentation-uk.pdf`
        - English: `webquiz-documentation-en.pdf`

        ## Installation

        ### Option 1: Pre-built Binary (Recommended for End Users)
        Download the zipped binary for your platform from the assets below:

        **⚠️ Windows Defender Warning**: Windows may flag the executable as a threat (false positive). This is common with PyInstaller binaries. The executable is safe - it's open source and built by GitHub Actions. You can:
        - Add an exclusion in Windows Security for the webquiz executable
        - Verify the executable on [VirusTotal](https://www.virustotal.com/)
        - Install via `pip install webquiz` instead (requires Python)

        **Linux:**
        ```bash
        wget https://github.com/oduvan/webquiz/releases/download/v${{ github.event.inputs.version }}/webquiz-linux.zip
        unzip webquiz-linux.zip
        chmod +x webquiz-linux
        ./webquiz-linux --help
        ```

        **macOS Intel (x86_64):**
        ```bash
        wget https://github.com/oduvan/webquiz/releases/download/v${{ github.event.inputs.version }}/webquiz-macos-intel.zip
        unzip webquiz-macos-intel.zip
        chmod +x webquiz-macos-intel
        ./webquiz-macos-intel --help
        ```

        **macOS Apple Silicon (ARM64/M1/M2/M3):**
        ```bash
        wget https://github.com/oduvan/webquiz/releases/download/v${{ github.event.inputs.version }}/webquiz-macos-apple-silicon.zip
        unzip webquiz-macos-apple-silicon.zip
        chmod +x webquiz-macos-apple-silicon
        ./webquiz-macos-apple-silicon --help
        ```

        **Windows:**
        ```powershell
        # Download webquiz-windows.exe.zip from assets, extract, then run:
        webquiz-windows.exe --help
        ```

        ### Option 2: Python Package (For Developers)
        ```bash
        pip install webquiz==${{ github.event.inputs.version }}
        ```

        ## What's Changed
        See the [commit history](https://github.com/oduvan/webquiz/commits/v${{ github.event.inputs.version }}) for detailed changes.

        ---
        *This release was automatically created by the release workflow.*
        EOF

        # Create release with built artifacts (includes wheel, tar.gz, PDFs, and zipped binaries)
        gh release create "v${{ github.event.inputs.version }}" \
          --title "Release v${{ github.event.inputs.version }}" \
          --notes-file release_notes.md \
          --target ${{ github.ref_name }} \
          dist/* \
          docs/webquiz-documentation-uk.pdf \
          docs/webquiz-documentation-en.pdf \
          binaries/webquiz-linux/webquiz-linux.zip \
          binaries/webquiz-macos-intel/webquiz-macos-intel.zip \
          binaries/webquiz-macos-apple-silicon/webquiz-macos-apple-silicon.zip \
          binaries/webquiz-windows.exe/webquiz-windows.exe.zip

    - name: Update webquiz-ansible repository
      env:
        ANSIBLE_REPO_TOKEN: ${{ secrets.ANSIBLE_REPO_TOKEN }}
      run: |
        echo "Updating webquiz-ansible repository with new version ${{ github.event.inputs.version }}"

        # Clone the webquiz-ansible repository
        git clone https://$ANSIBLE_REPO_TOKEN@github.com/oduvan/webquiz-ansible.git
        cd webquiz-ansible

        # Configure git for the action
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Update the version in playbooks/raspberry-pi.yml
        sed -i 's/webquiz==[0-9]\+\(\.[0-9]\+\)\{0,2\}/webquiz==${{ github.event.inputs.version }}/g' playbooks/raspberry-pi.yml

        # Check if there are any changes to commit
        if git diff --quiet; then
          echo "No changes to commit - version may already be up to date"
        else
          # Commit and push the changes
          git add playbooks/raspberry-pi.yml
          git commit -m "Update webquiz version to ${{ github.event.inputs.version }}

          Automatically updated by webquiz release workflow.
          Release: https://github.com/oduvan/webquiz/releases/tag/v${{ github.event.inputs.version }}"

          git push origin master
          echo "Successfully updated webquiz-ansible repository"
        fi
